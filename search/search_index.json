{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cortical Tools","text":"<p>Cortical Tools offers dataset-specific Python clients for interacting with several CAVE datasets, in particular the Microns65 dataset and V1dd dataset. It wraps CAVEclient and related tooling with a more task-focused design than the infrastructure-focused CAVEclient. The public entry point is a preconfigured client for datasets.</p> <ul> <li>Get started with the Examples</li> <li>Browse the API Reference</li> <li>See what's new in the Changelog</li> </ul>"},{"location":"#who-can-use-it","title":"Who can use it?","text":"<p>Cortical Tools can be used if you are working with either the publicly accessible datastacks <code>minnie65_public</code> or <code>v1dd_public</code>. In addition, if you are using the production datastacks for these same datastacks, you can use those as well.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install cortical-tools\n</code></pre> <p>Cortical Tools is opinionated, and installs not only CAVEclient, but a number of related tools like <code>nglui</code>, <code>pcg_skel</code>, <code>cloudvolume</code>, and <code>standard_transform</code> that are commonly used in conjunction with CAVE datasets.</p>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code>from cortical_tools.datasets.minnie_public import client\nclient = MinniePublicClient()\nclient\n</code></pre> <p>This will return a <code>MinniePublicClient</code> object that is ready to use. For example, <code>client.neuroglancer_url()</code> will return a URL that opens the Neuroglancer viewer at the specified location. Your standard <code>CAVEclient</code> functionality is available under <code>client.cave</code>.</p>"},{"location":"#who-made-this","title":"Who made this?","text":"<p>This is a totally unofficial tool that Casey Schneider-Mizell made to use for himself, and maybe you'll find some useful things here too.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#007","title":"0.0.7","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added <code>root_ids</code> argument to <code>neuroglancer_url</code> method to allow specifying root IDs to include in the Neuroglancer view.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed repr methods for MicronsProdClient to return strings correctly.</li> <li>Updated <code>nglui</code> dependency version to fix string issues.</li> </ul>"},{"location":"changelog/#006","title":"0.0.6","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed a bug in <code>root_id_to_cell_id</code> that could cause incorrect results in certain conditions when using alternative lookup tables.</li> <li>Removed a non-available alternative lookup table from the v1dd_public dataset client.</li> </ul>"},{"location":"changelog/#005","title":"0.0.5","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added <code>cortical_tools.load_client</code> method that takes a dataset name (currently one of \"v1dd\", \"v1dd_public\", \"microns_prod\", \"microns_public\") and returns the corresponding dataset client. This is intended for scripts and paramterized notebooks.</li> </ul>"},{"location":"changelog/#004","title":"0.0.4","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added <code>query_synapses</code> method to query synapses inclusively with reference tables.</li> <li>Added optional bounds argument to get_l2_ids to limit search area.</li> <li>Added dataset-active tests for all datastacks.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed bug in streamline transformations for skeletons and synapses.</li> <li>Fixed bug in get_l2_ids that did not work.</li> <li>Allowed <code>cell_id_to_root_id</code> and <code>root_id_to_cell_id</code> to work with a single numeric ID.</li> <li>Suppress caveclient warnings.</li> </ul>"},{"location":"changelog/#003","title":"0.0.3","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Improved mesh vertex lookup memory usage and performance. Should no longer crash on large meshes due to out of memory issues.</li> </ul>"},{"location":"changelog/#002","title":"0.0.2","text":""},{"location":"changelog/#changed","title":"Changed","text":"<p>Added additional docstrings.</p>"},{"location":"changelog/#001","title":"0.0.1","text":"<p>First release!</p>"},{"location":"examples/","title":"Examples","text":"<p>Here are a few examples of using dataset-specific clients for work.</p>"},{"location":"examples/#install-and-import","title":"Install and import","text":"<p>Importing <code>client</code> from any of the dataset-specific modules in <code>cortical_tools.datasets</code> will return a fully initialized dataset client object configured for that dataset. The current datasets are <code>minnie_public</code>, <code>minnie_prod</code>, <code>v1dd</code>, and <code>v1dd_public</code>. If you have not yet configured your environment to access these datasets, you will need to do so before using the client. Please see your dataset documentation to do this.</p> <pre><code>from cortical_tools.datasets.minnie_public import client\n\nclient\n</code></pre> <p>This client is not a CAVEclient, but rather a dataset-specific client that provides access to the dataset's resources and functionality. The typical CAVEclient is available under <code>client.cave</code>, and has all the usual CAVE functionality.</p> <p>See the Dataset Clients section for details on all available dataset clients.</p>"},{"location":"examples/#neuroglancer-links","title":"Neuroglancer links","text":"<p>If you want to jump directly into the data, you can use the <code>neuroglancer_url()</code> method to get a URL that opens the Neuroglancer viewer at the specified location. This url is also integrated into the object representation in a jupyter notebook, where if you just return <code>client</code>, you can click on it to open a neuroglancer viewer.</p> <p>There are a few handy features inherited from <code>nglui</code>, including the ability to copy the URL to your clipboard with <code>client.neuroglancer_url(clipboard=True)</code>.</p>"},{"location":"examples/#queries","title":"Queries","text":"<p>The <code>tables</code> and <code>views</code> properties give access to the dataset's tables and views via an autocomplete-compatible feature. This is a passthrough to the <code>caveclient.materialize.tables</code> and <code>caveclient.materialize.views</code> functionality.</p> <pre><code>client.tables\n</code></pre> <p>alone will list the tables. To query one of these tables, you can get access via <code>client.tables.&lt;table_name&gt;</code>. For example:</p> <pre><code>df = client.tables.proofreading_status_and_strategy().query()\n</code></pre> <p>would return the proofreading status table. You can query using the parameters in the table name function and set response parameters in the query function. For example,</p> <pre><code>proof_df = client.tables.proofreading_status_and_strategy(\n    status_axon=True\n).query(desired_resolution=[1,1,1], split_positions=True)\n</code></pre> <p>will return only those rows with <code>status_axon=True</code> and with the desired resolution of <code>[1,1,1]</code> and split positions enabled.</p>"},{"location":"examples/#map-cell-ids-to-root-ids-and-back-again","title":"Map cell IDs to root IDs and back again","text":"<p>Root ids and cell ids have complementary uses. Root ids represent the exact reconstruction state of an object and can be used to load a cell in neuroglancer, however they change with every edit. In contrast, cell ids are stable and do not change over time, but they point to different versions of the same object at different times and cannot be plugged into neuroglancer by default. Because of this, it's useful to go back and forth between root ids and cell ids for different purposes. There is a convenience function that helps you do this.</p> <pre><code>root_ids = [864691134885645050, 864691135440543560, 864691135157210468]\ncell_id_df = client.root_id_to_cell_id(root_ids)\n</code></pre> <p>This will return a dataframe whose indices are the root ids queried and with a column <code>cell_id</code> that is the cell id. You could then use this to merge with other dataframes on the index. If a cell has no cell id, perhaps because it has no entry (or multiple entries) in the tables that define cell ids, it will have a value of -1. Note that one does not need to specify a timestamp at which a root id was valid, this will be looked up along the way.</p> <p>You can do the reverse, with cell id to root id lookup via the <code>cell_id_to_root_id()</code> method:</p> <pre><code>cell_ids = [264898, 262893, 260746, 256505, 304873, 309263, 292878, 365890, 230644, 518853]\nroot_id_df = client.cell_id_to_root_id(cell_ids)\n</code></pre> <p>with similar properties, namely a dataframe whose index is cell ids and whose column is <code>root_id</code>, which is a root id.</p> <p>Note</p> <p>Note that both of these functions will look both at the main cell id table and any backup table used. Why do backup tables exist? Sometimes the primary cell id table is based on nucleus locations and in a small number of cases these nucleus centers don't fall on the segmentation. To get around this, we sometimes have alternative lookup tables that complement the main one. These functions use both the main and backup tables to provide the most accurate mapping.</p>"},{"location":"examples/#spatial-transformations","title":"Spatial transformations","text":"<p>Different cortical datasets are oriented in different ways, but typically we want to consider a coordinate system where the pial surface is at <code>y=0</code> and depth goes orthogonally down toward white matter. Moreover, there can be a natural curvature to cells at different depths that we want to account for. The package <code>standard_transform</code> provides spatial transforms tailored to these database that will help approximate these issues.</p> <p>The appropriate set of transform functions are mapped to <code>client.space</code>, for example <code>standard_transform.minnie65_ds</code> is mapped to <code>client.space</code> in the above examples.</p> <p>Let's use this to find the soma depth for the proofread points. Because we used a desired resolution of <code>[1,1,1]</code>, spatial values came back in nanometers.</p> <pre><code>soma_depth = client.space.transform_nm.apply_dataframe('pt_position', proof_df, projection='y')\n</code></pre>"},{"location":"examples/#getting-meshes","title":"Getting meshes","text":"<p>Meshes can be retrieved through <code>cloudvolume</code>, but there's no need to do that directly here.</p> <pre><code>mesh = client.mesh.get_mesh(864691134885645050)\n</code></pre> <p>will return a <code>cloudvolume.Mesh</code> object defined by properties <code>vertices</code> and <code>faces</code>. A similar <code>get_meshes()</code> function will return a dictionary of meshes keyed by their root ids.</p> <p>See the MeshClient documentation for all available mesh operations.</p>"},{"location":"examples/#get-a-skeleton","title":"Get a skeleton","text":"<p>The new skeleton service helps return skeletons, and <code>pcg_skel</code> has additional functions to add synapses and vertex ids that help you map additional properties. This functionality is baked into <code>cortical_tools</code> like so:</p> <pre><code>root_id = int(root_ids.iloc[0])\nnrn = client.get_skeleton(root_id, synapses=True)\n</code></pre> <p>This returns a Meshparty \"meshwork\" object with <code>skel.skeleton</code> as a skeleton, as well as synapse information in <code>nrn.anno.pre_syn</code> and <code>nrn.anno.post_syn</code> respectively.</p> <p>In addition, you can apply the same spatial transformations you do to points to the skeletons and annotations returned. The parameter <code>transform</code> can take one of two values: <code>rigid</code> or <code>streamline</code>. If you choose <code>rigid</code>, the skeleton and annotation points are rotated and translated so that the pial surface is at y=0 and \"down\" is toward white matter. If you choose <code>streamline</code>, the points are deformed along the principal curvature of neurons that project across layers. This will have the effect of making a \"direct\" translaminar projection such as the axon of a layer 2/3 cell or the apical dendrite of a layer 6 cell will appear more vertical.</p> <p>See the <code>get_skeleton()</code> method documentation for all available parameters.</p>"},{"location":"examples/#helpers-to-download-bulk-exports","title":"Helpers to download bulk exports","text":"<p>To help with bulk analysis and data archiving, many tables are exported as files to a cloud storage bucket. If you have access to one of these buckets (ask your system administrator!), the exports module helps find and retrieve these files.</p> <pre><code># If you have a static export bucket\nclient.set_export_cloudpath(\"gs://my-bucket/exports/\") # Get this from someone in the know\n</code></pre> <p>Now, to see what is available, you can use the <code>available_data_df()</code> function to get a DataFrame of all available export files, what versions are present, and how big the files are.</p> <p>Once you know the table name and the desired version, you can use the <code>get_table()</code> function to retrieve the data as a DataFrame.</p> <pre><code>df = client.exports.get_table('connections_with_nuclei', 1484)\n</code></pre> <p>If you want to know what versions are available for a given table, you can use the <code>available_versions()</code> function.</p> <pre><code>versions = client.exports.available_versions('connections_with_nuclei')\n</code></pre> <p>See the File Export Classes documentation for more details.</p>"},{"location":"examples/#helpers-to-assign-level-2-ids-to-a-mesh","title":"Helpers to assign level 2 ids to a mesh","text":"<p>Mesh vertices labeled by different Layer 2 Ids.</p> <p>It can be convenient to mask out parts of a mesh that you don't want to visualize or analyze, but most ways of assigning labels relate to skeletons. Skeleton vertices that are generated with <code>pcg_skel</code> have a unique \"level 2 id\" associated with each vertex, and nominally there is a mapping between these level 2 ids and mesh vertices. In practice, however, this mapping is lost in the creation of meshes.</p> <p>In order to recover this mapping, you can use the <code>compute_vertex_to_l2_mapping()</code> function in the <code>MeshClient</code> class. This function takes the root ID of the mesh and returns an array of layer 2 IDs for each vertex.</p> <pre><code>l2mapping = client.mesh.compute_vertex_to_l2_mapping(root_id)\n</code></pre> <p>This will take anywhere from a minute to several minutes depending on the size of the mesh, including both mesh downloading and processing. If you want to cut down some of the time and you have a mesh already downloaded, you can pass the vertex and face arrays directly to the function:</p> <pre><code>l2mapping = client.mesh.compute_vertex_to_l2_mapping(\n    root_id,\n    vertices=mesh.vertices,\n    faces=mesh.faces\n)\n</code></pre> <p>The resulting l2mapping will have the same length as <code>mesh.vertices</code> and a corresponding layer 2 ID for each vertex. Vertices that were unable to be assigned are given a value of <code>0</code>.</p> <p>Finished mappings are preserved in the MeshClient under <code>client.mesh.mesh_l2_mappings</code>, which is a dictionary from root ids to id maps.</p> <p>If you want more complete information about the process, including mesh vertices and faces, you can also set the parameter <code>return_assigner=True</code>, which will return both a mapping array and the VertexAssigner class, which contains among other things the vertices and faces of the mesh (<code>va.vertices</code> and <code>va.faces</code> respectively).</p>"},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/api/#dataset-clients","title":"Dataset Clients","text":"<p>Cortical Tools provides preconfigured clients for specific datasets. Each dataset client inherits all functionality from the base <code>DatasetClient</code> class but is preconfigured with dataset-specific parameters.</p>"},{"location":"reference/api/#microns-dataset","title":"Microns Dataset","text":""},{"location":"reference/api/#minniepublicclient","title":"MinniePublicClient","text":"<p>               Bases: <code>DatasetClient</code></p> <p>Methods:</p> <ul> <li> <code>fix_mat_timestamp</code>             \u2013              <p>Fix the timestamp to a specific materialization version, by default the current version.</p> </li> <li> <code>get_l2_ids</code>             \u2013              <p>Get level 2 ids for a root id.</p> </li> <li> <code>get_skeleton</code>             \u2013              <p>Get the meshwork for a specific root ID.</p> </li> <li> <code>latest_valid_timestamp</code>             \u2013              <p>Get the latest valid timestamps for a list of root IDs.</p> </li> <li> <code>neuroglancer_url</code>             \u2013              <p>Get the Neuroglancer URL for the current datastack and version.</p> </li> <li> <code>now</code>             \u2013              <p>Get the current time in UTC timezone.</p> </li> <li> <code>query_synapses</code>             \u2013              <p>Query synapses for one or more root ID.</p> </li> <li> <code>set_export_cloudpath</code>             \u2013              <p>Set the cloud path for static table exports.</p> </li> <li> <code>unfix_mat_timestamp</code>             \u2013              <p>Unfix the timestamp from the materialization version.</p> </li> <li> <code>version_timestamp</code>             \u2013              <p>Get the timestamp for a specific materialization version.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>cave</code>               (<code>CAVEclientFull</code>)           \u2013            <p>Get the CAVEclient instance for this CortexClient.</p> </li> <li> <code>dataset_transform</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform associated with this CortexClient.</p> </li> <li> <code>mesh</code>               (<code>MeshClient</code>)           \u2013            <p>Get the MeshClient instance for this CortexClient.</p> </li> <li> <code>space</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform for this CortexClient.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Get the materialization version of the CAVEclient.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.cave","title":"<code>cave</code>  <code>property</code>","text":"<p>Get the CAVEclient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.dataset_transform","title":"<code>dataset_transform</code>  <code>property</code>","text":"<p>Get the dataset transform associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.mesh","title":"<code>mesh</code>  <code>property</code>","text":"<p>Get the MeshClient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.space","title":"<code>space</code>  <code>property</code>","text":"<p>Get the dataset transform for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.version","title":"<code>version</code>  <code>property</code> <code>writable</code>","text":"<p>Get the materialization version of the CAVEclient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.fix_mat_timestamp","title":"<code>fix_mat_timestamp(version=None)</code>","text":"<p>Fix the timestamp to a specific materialization version, by default the current version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to fix the timestamp to, by default None (uses current version).</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.get_l2_ids","title":"<code>get_l2_ids(root_id, bounds=None)</code>","text":"<p>Get level 2 ids for a root id.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>List of level 2 IDs for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.get_skeleton","title":"<code>get_skeleton(root_id, synapses=True, restore_graph=False, restore_properties=True, synapse_reference_tables=None, skeleton_version=None, transform=None)</code>","text":"<p>Get the meshwork for a specific root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>synapses</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, include synapses in the meshwork, by default True</p> </li> <li> <code>restore_graph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, restore the graph structure, by default False</p> </li> <li> <code>restore_properties</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, restore the properties of the meshwork, by default True</p> </li> <li> <code>synapse_reference_tables</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional synapse reference tables to use, by default None</p> </li> <li> <code>skeleton_version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Version of the skeleton to use, by default None</p> </li> <li> <code>transform</code>               (<code>Literal['rigid', 'streamline']</code>, default:                   <code>None</code> )           \u2013            <p>Type of transformation to apply, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Meshwork</code>           \u2013            <p>The meshwork for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.latest_valid_timestamp","title":"<code>latest_valid_timestamp(root_ids)</code>","text":"<p>Get the latest valid timestamps for a list of root IDs. If the root ID is out of date, it will return the last timestamp at which it was valid and could be used in queries. If the root ID is up to date, it will return the current timestamp at the request time, which is still ensured to be valid.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>list[int]</code>)           \u2013            <p>The list of root IDs to get the latest valid timestamps for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>NDArray</code>           \u2013            <p>The latest valid timestamps for the specified root IDs.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.neuroglancer_url","title":"<code>neuroglancer_url(target_url=None, clipboard=False, shorten=False, root_ids=None)</code>","text":"<p>Get the Neuroglancer URL for the current datastack and version.</p> <p>Parameters:</p> <ul> <li> <code>target_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for Neuroglancer, by default None (uses default server address).</p> </li> <li> <code>root_ids</code>               (<code>Optional[list[int]]</code>, default:                   <code>None</code> )           \u2013            <p>List of root IDs to include in the Neuroglancer URL, by default None (includes none).</p> </li> <li> <code>clipboard</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, copy the URL to the clipboard instead of returning it, by default False.</p> </li> <li> <code>shorten</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, shorten the URL using a URL shortener service, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Neuroglancer URL.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.now","title":"<code>now()</code>  <code>staticmethod</code>","text":"<p>Get the current time in UTC timezone.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.query_synapses","title":"<code>query_synapses(root_ids, pre=False, post=False, reference_tables=None, synapse_table=None, omit_self_synapse=True, resolution=[1, 1, 1], split_positions=True, live=False, timestamp=None, suffixes=None, batch_size=10, ref_batch_size=5000, progress=True)</code>","text":"<p>Query synapses for one or more root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>(int, list)</code>)           \u2013            <p>Root ID or list of ids for a neuron.</p> </li> <li> <code>pre</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include pre-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>post</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include post-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>reference_tables</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>List of reference tables to use, by default None. Reference tables will be merged on \"id\" column, which could result in null values.</p> </li> <li> <code>synapse_table</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Name of the synapse table to use, by default None (uses default synapse table)</p> </li> <li> <code>resolution</code>           \u2013            <p>Desired resolution for positions, by default [1, 1, 1]</p> </li> <li> <code>split_positions</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, split position columns into x, y, z, by default True.</p> </li> <li> <code>live</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use live_query to query synapses, by default False.</p> </li> <li> <code>timestamp</code>               (<code>datetime</code>, default:                   <code>None</code> )           \u2013            <p>Timestamp for the query, by default None (uses current time). The same timestamp must be used for all root IDs.</p> </li> <li> <code>omit_self_synapse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, omit self-synapses, by default True</p> </li> <li> <code>suffixes</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Suffixes to use for reference table columns, by default None.</p> </li> <li> <code>batch_size</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Batch size for number of cells to query at once, by default 10.</p> </li> <li> <code>ref_batch_size</code>               (<code>int</code>, default:                   <code>5000</code> )           \u2013            <p>Batch size for number of synapses to query in reference tables at once, by default 5000.</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, show progress bar, by default True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>DataFrame containing the synapses for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.set_export_cloudpath","title":"<code>set_export_cloudpath(cloudpath)</code>","text":"<p>Set the cloud path for static table exports.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.unfix_mat_timestamp","title":"<code>unfix_mat_timestamp()</code>","text":"<p>Unfix the timestamp from the materialization version.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_public.MinniePublicClient.version_timestamp","title":"<code>version_timestamp(version=None)</code>","text":"<p>Get the timestamp for a specific materialization version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to get the timestamp for, by default None (uses current version).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The timestamp of the specified materialization version.</p> </li> </ul>"},{"location":"reference/api/#micronsprodclient","title":"MicronsProdClient","text":"<p>               Bases: <code>DatasetClient</code></p> <p>Methods:</p> <ul> <li> <code>fix_mat_timestamp</code>             \u2013              <p>Fix the timestamp to a specific materialization version, by default the current version.</p> </li> <li> <code>get_l2_ids</code>             \u2013              <p>Get level 2 ids for a root id.</p> </li> <li> <code>get_skeleton</code>             \u2013              <p>Get the meshwork for a specific root ID.</p> </li> <li> <code>latest_valid_timestamp</code>             \u2013              <p>Get the latest valid timestamps for a list of root IDs.</p> </li> <li> <code>neuroglancer_url</code>             \u2013              <p>Get the Neuroglancer URL for the current datastack and version.</p> </li> <li> <code>now</code>             \u2013              <p>Get the current time in UTC timezone.</p> </li> <li> <code>query_synapses</code>             \u2013              <p>Query synapses for one or more root ID.</p> </li> <li> <code>set_export_cloudpath</code>             \u2013              <p>Set the cloud path for static table exports.</p> </li> <li> <code>unfix_mat_timestamp</code>             \u2013              <p>Unfix the timestamp from the materialization version.</p> </li> <li> <code>version_timestamp</code>             \u2013              <p>Get the timestamp for a specific materialization version.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>cave</code>               (<code>CAVEclientFull</code>)           \u2013            <p>Get the CAVEclient instance for this CortexClient.</p> </li> <li> <code>dataset_transform</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform associated with this CortexClient.</p> </li> <li> <code>mesh</code>               (<code>MeshClient</code>)           \u2013            <p>Get the MeshClient instance for this CortexClient.</p> </li> <li> <code>space</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform for this CortexClient.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Get the materialization version of the CAVEclient.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.cave","title":"<code>cave</code>  <code>property</code>","text":"<p>Get the CAVEclient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.dataset_transform","title":"<code>dataset_transform</code>  <code>property</code>","text":"<p>Get the dataset transform associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.mesh","title":"<code>mesh</code>  <code>property</code>","text":"<p>Get the MeshClient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.space","title":"<code>space</code>  <code>property</code>","text":"<p>Get the dataset transform for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.version","title":"<code>version</code>  <code>property</code> <code>writable</code>","text":"<p>Get the materialization version of the CAVEclient.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.fix_mat_timestamp","title":"<code>fix_mat_timestamp(version=None)</code>","text":"<p>Fix the timestamp to a specific materialization version, by default the current version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to fix the timestamp to, by default None (uses current version).</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.get_l2_ids","title":"<code>get_l2_ids(root_id, bounds=None)</code>","text":"<p>Get level 2 ids for a root id.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>List of level 2 IDs for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.get_skeleton","title":"<code>get_skeleton(root_id, synapses=True, restore_graph=False, restore_properties=True, synapse_reference_tables=None, skeleton_version=None, transform=None)</code>","text":"<p>Get the meshwork for a specific root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>synapses</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, include synapses in the meshwork, by default True</p> </li> <li> <code>restore_graph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, restore the graph structure, by default False</p> </li> <li> <code>restore_properties</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, restore the properties of the meshwork, by default True</p> </li> <li> <code>synapse_reference_tables</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional synapse reference tables to use, by default None</p> </li> <li> <code>skeleton_version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Version of the skeleton to use, by default None</p> </li> <li> <code>transform</code>               (<code>Literal['rigid', 'streamline']</code>, default:                   <code>None</code> )           \u2013            <p>Type of transformation to apply, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Meshwork</code>           \u2013            <p>The meshwork for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.latest_valid_timestamp","title":"<code>latest_valid_timestamp(root_ids)</code>","text":"<p>Get the latest valid timestamps for a list of root IDs. If the root ID is out of date, it will return the last timestamp at which it was valid and could be used in queries. If the root ID is up to date, it will return the current timestamp at the request time, which is still ensured to be valid.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>list[int]</code>)           \u2013            <p>The list of root IDs to get the latest valid timestamps for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>NDArray</code>           \u2013            <p>The latest valid timestamps for the specified root IDs.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.neuroglancer_url","title":"<code>neuroglancer_url(target_url=None, clipboard=False, shorten=False, root_ids=None)</code>","text":"<p>Get the Neuroglancer URL for the current datastack and version.</p> <p>Parameters:</p> <ul> <li> <code>target_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for Neuroglancer, by default None (uses default server address).</p> </li> <li> <code>root_ids</code>               (<code>Optional[list[int]]</code>, default:                   <code>None</code> )           \u2013            <p>List of root IDs to include in the Neuroglancer URL, by default None (includes none).</p> </li> <li> <code>clipboard</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, copy the URL to the clipboard instead of returning it, by default False.</p> </li> <li> <code>shorten</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, shorten the URL using a URL shortener service, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Neuroglancer URL.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.now","title":"<code>now()</code>  <code>staticmethod</code>","text":"<p>Get the current time in UTC timezone.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.query_synapses","title":"<code>query_synapses(root_ids, pre=False, post=False, reference_tables=None, synapse_table=None, omit_self_synapse=True, resolution=[1, 1, 1], split_positions=True, live=False, timestamp=None, suffixes=None, batch_size=10, ref_batch_size=5000, progress=True)</code>","text":"<p>Query synapses for one or more root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>(int, list)</code>)           \u2013            <p>Root ID or list of ids for a neuron.</p> </li> <li> <code>pre</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include pre-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>post</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include post-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>reference_tables</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>List of reference tables to use, by default None. Reference tables will be merged on \"id\" column, which could result in null values.</p> </li> <li> <code>synapse_table</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Name of the synapse table to use, by default None (uses default synapse table)</p> </li> <li> <code>resolution</code>           \u2013            <p>Desired resolution for positions, by default [1, 1, 1]</p> </li> <li> <code>split_positions</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, split position columns into x, y, z, by default True.</p> </li> <li> <code>live</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use live_query to query synapses, by default False.</p> </li> <li> <code>timestamp</code>               (<code>datetime</code>, default:                   <code>None</code> )           \u2013            <p>Timestamp for the query, by default None (uses current time). The same timestamp must be used for all root IDs.</p> </li> <li> <code>omit_self_synapse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, omit self-synapses, by default True</p> </li> <li> <code>suffixes</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Suffixes to use for reference table columns, by default None.</p> </li> <li> <code>batch_size</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Batch size for number of cells to query at once, by default 10.</p> </li> <li> <code>ref_batch_size</code>               (<code>int</code>, default:                   <code>5000</code> )           \u2013            <p>Batch size for number of synapses to query in reference tables at once, by default 5000.</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, show progress bar, by default True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>DataFrame containing the synapses for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.set_export_cloudpath","title":"<code>set_export_cloudpath(cloudpath)</code>","text":"<p>Set the cloud path for static table exports.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.unfix_mat_timestamp","title":"<code>unfix_mat_timestamp()</code>","text":"<p>Unfix the timestamp from the materialization version.</p>"},{"location":"reference/api/#cortical_tools.datasets.microns_prod.MicronsProdClient.version_timestamp","title":"<code>version_timestamp(version=None)</code>","text":"<p>Get the timestamp for a specific materialization version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to get the timestamp for, by default None (uses current version).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The timestamp of the specified materialization version.</p> </li> </ul>"},{"location":"reference/api/#v1dd-dataset","title":"V1DD Dataset","text":""},{"location":"reference/api/#v1ddpublicclient","title":"V1ddPublicClient","text":"<p>               Bases: <code>DatasetClient</code></p> <p>Methods:</p> <ul> <li> <code>fix_mat_timestamp</code>             \u2013              <p>Fix the timestamp to a specific materialization version, by default the current version.</p> </li> <li> <code>get_l2_ids</code>             \u2013              <p>Get level 2 ids for a root id.</p> </li> <li> <code>get_skeleton</code>             \u2013              <p>Get the meshwork for a specific root ID.</p> </li> <li> <code>latest_valid_timestamp</code>             \u2013              <p>Get the latest valid timestamps for a list of root IDs.</p> </li> <li> <code>neuroglancer_url</code>             \u2013              <p>Get the Neuroglancer URL for the current datastack and version.</p> </li> <li> <code>now</code>             \u2013              <p>Get the current time in UTC timezone.</p> </li> <li> <code>query_synapses</code>             \u2013              <p>Query synapses for one or more root ID.</p> </li> <li> <code>set_export_cloudpath</code>             \u2013              <p>Set the cloud path for static table exports.</p> </li> <li> <code>unfix_mat_timestamp</code>             \u2013              <p>Unfix the timestamp from the materialization version.</p> </li> <li> <code>version_timestamp</code>             \u2013              <p>Get the timestamp for a specific materialization version.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>cave</code>               (<code>CAVEclientFull</code>)           \u2013            <p>Get the CAVEclient instance for this CortexClient.</p> </li> <li> <code>dataset_transform</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform associated with this CortexClient.</p> </li> <li> <code>mesh</code>               (<code>MeshClient</code>)           \u2013            <p>Get the MeshClient instance for this CortexClient.</p> </li> <li> <code>space</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform for this CortexClient.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Get the materialization version of the CAVEclient.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.cave","title":"<code>cave</code>  <code>property</code>","text":"<p>Get the CAVEclient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.dataset_transform","title":"<code>dataset_transform</code>  <code>property</code>","text":"<p>Get the dataset transform associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.mesh","title":"<code>mesh</code>  <code>property</code>","text":"<p>Get the MeshClient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.space","title":"<code>space</code>  <code>property</code>","text":"<p>Get the dataset transform for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.version","title":"<code>version</code>  <code>property</code> <code>writable</code>","text":"<p>Get the materialization version of the CAVEclient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.fix_mat_timestamp","title":"<code>fix_mat_timestamp(version=None)</code>","text":"<p>Fix the timestamp to a specific materialization version, by default the current version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to fix the timestamp to, by default None (uses current version).</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.get_l2_ids","title":"<code>get_l2_ids(root_id, bounds=None)</code>","text":"<p>Get level 2 ids for a root id.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>List of level 2 IDs for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.get_skeleton","title":"<code>get_skeleton(root_id, synapses=True, restore_graph=False, restore_properties=True, synapse_reference_tables=None, skeleton_version=None, transform=None)</code>","text":"<p>Get the meshwork for a specific root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>synapses</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, include synapses in the meshwork, by default True</p> </li> <li> <code>restore_graph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, restore the graph structure, by default False</p> </li> <li> <code>restore_properties</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, restore the properties of the meshwork, by default True</p> </li> <li> <code>synapse_reference_tables</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional synapse reference tables to use, by default None</p> </li> <li> <code>skeleton_version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Version of the skeleton to use, by default None</p> </li> <li> <code>transform</code>               (<code>Literal['rigid', 'streamline']</code>, default:                   <code>None</code> )           \u2013            <p>Type of transformation to apply, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Meshwork</code>           \u2013            <p>The meshwork for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.latest_valid_timestamp","title":"<code>latest_valid_timestamp(root_ids)</code>","text":"<p>Get the latest valid timestamps for a list of root IDs. If the root ID is out of date, it will return the last timestamp at which it was valid and could be used in queries. If the root ID is up to date, it will return the current timestamp at the request time, which is still ensured to be valid.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>list[int]</code>)           \u2013            <p>The list of root IDs to get the latest valid timestamps for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>NDArray</code>           \u2013            <p>The latest valid timestamps for the specified root IDs.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.neuroglancer_url","title":"<code>neuroglancer_url(target_url=None, clipboard=False, shorten=False, root_ids=None)</code>","text":"<p>Get the Neuroglancer URL for the current datastack and version.</p> <p>Parameters:</p> <ul> <li> <code>target_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for Neuroglancer, by default None (uses default server address).</p> </li> <li> <code>root_ids</code>               (<code>Optional[list[int]]</code>, default:                   <code>None</code> )           \u2013            <p>List of root IDs to include in the Neuroglancer URL, by default None (includes none).</p> </li> <li> <code>clipboard</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, copy the URL to the clipboard instead of returning it, by default False.</p> </li> <li> <code>shorten</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, shorten the URL using a URL shortener service, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Neuroglancer URL.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.now","title":"<code>now()</code>  <code>staticmethod</code>","text":"<p>Get the current time in UTC timezone.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.query_synapses","title":"<code>query_synapses(root_ids, pre=False, post=False, reference_tables=None, synapse_table=None, omit_self_synapse=True, resolution=[1, 1, 1], split_positions=True, live=False, timestamp=None, suffixes=None, batch_size=10, ref_batch_size=5000, progress=True)</code>","text":"<p>Query synapses for one or more root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>(int, list)</code>)           \u2013            <p>Root ID or list of ids for a neuron.</p> </li> <li> <code>pre</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include pre-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>post</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include post-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>reference_tables</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>List of reference tables to use, by default None. Reference tables will be merged on \"id\" column, which could result in null values.</p> </li> <li> <code>synapse_table</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Name of the synapse table to use, by default None (uses default synapse table)</p> </li> <li> <code>resolution</code>           \u2013            <p>Desired resolution for positions, by default [1, 1, 1]</p> </li> <li> <code>split_positions</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, split position columns into x, y, z, by default True.</p> </li> <li> <code>live</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use live_query to query synapses, by default False.</p> </li> <li> <code>timestamp</code>               (<code>datetime</code>, default:                   <code>None</code> )           \u2013            <p>Timestamp for the query, by default None (uses current time). The same timestamp must be used for all root IDs.</p> </li> <li> <code>omit_self_synapse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, omit self-synapses, by default True</p> </li> <li> <code>suffixes</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Suffixes to use for reference table columns, by default None.</p> </li> <li> <code>batch_size</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Batch size for number of cells to query at once, by default 10.</p> </li> <li> <code>ref_batch_size</code>               (<code>int</code>, default:                   <code>5000</code> )           \u2013            <p>Batch size for number of synapses to query in reference tables at once, by default 5000.</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, show progress bar, by default True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>DataFrame containing the synapses for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.set_export_cloudpath","title":"<code>set_export_cloudpath(cloudpath)</code>","text":"<p>Set the cloud path for static table exports.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.unfix_mat_timestamp","title":"<code>unfix_mat_timestamp()</code>","text":"<p>Unfix the timestamp from the materialization version.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd_public.V1ddPublicClient.version_timestamp","title":"<code>version_timestamp(version=None)</code>","text":"<p>Get the timestamp for a specific materialization version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to get the timestamp for, by default None (uses current version).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The timestamp of the specified materialization version.</p> </li> </ul>"},{"location":"reference/api/#v1ddclient","title":"V1ddClient","text":"<p>               Bases: <code>DatasetClient</code></p> <p>Methods:</p> <ul> <li> <code>fix_mat_timestamp</code>             \u2013              <p>Fix the timestamp to a specific materialization version, by default the current version.</p> </li> <li> <code>get_l2_ids</code>             \u2013              <p>Get level 2 ids for a root id.</p> </li> <li> <code>get_skeleton</code>             \u2013              <p>Get the meshwork for a specific root ID.</p> </li> <li> <code>latest_valid_timestamp</code>             \u2013              <p>Get the latest valid timestamps for a list of root IDs.</p> </li> <li> <code>neuroglancer_url</code>             \u2013              <p>Get the Neuroglancer URL for the current datastack and version.</p> </li> <li> <code>now</code>             \u2013              <p>Get the current time in UTC timezone.</p> </li> <li> <code>query_synapses</code>             \u2013              <p>Query synapses for one or more root ID.</p> </li> <li> <code>set_export_cloudpath</code>             \u2013              <p>Set the cloud path for static table exports.</p> </li> <li> <code>unfix_mat_timestamp</code>             \u2013              <p>Unfix the timestamp from the materialization version.</p> </li> <li> <code>version_timestamp</code>             \u2013              <p>Get the timestamp for a specific materialization version.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>cave</code>               (<code>CAVEclientFull</code>)           \u2013            <p>Get the CAVEclient instance for this CortexClient.</p> </li> <li> <code>dataset_transform</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform associated with this CortexClient.</p> </li> <li> <code>mesh</code>               (<code>MeshClient</code>)           \u2013            <p>Get the MeshClient instance for this CortexClient.</p> </li> <li> <code>space</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform for this CortexClient.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Get the materialization version of the CAVEclient.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.cave","title":"<code>cave</code>  <code>property</code>","text":"<p>Get the CAVEclient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.dataset_transform","title":"<code>dataset_transform</code>  <code>property</code>","text":"<p>Get the dataset transform associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.mesh","title":"<code>mesh</code>  <code>property</code>","text":"<p>Get the MeshClient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.space","title":"<code>space</code>  <code>property</code>","text":"<p>Get the dataset transform for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.version","title":"<code>version</code>  <code>property</code> <code>writable</code>","text":"<p>Get the materialization version of the CAVEclient.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.fix_mat_timestamp","title":"<code>fix_mat_timestamp(version=None)</code>","text":"<p>Fix the timestamp to a specific materialization version, by default the current version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to fix the timestamp to, by default None (uses current version).</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.get_l2_ids","title":"<code>get_l2_ids(root_id, bounds=None)</code>","text":"<p>Get level 2 ids for a root id.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>List of level 2 IDs for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.get_skeleton","title":"<code>get_skeleton(root_id, synapses=True, restore_graph=False, restore_properties=True, synapse_reference_tables=None, skeleton_version=None, transform=None)</code>","text":"<p>Get the meshwork for a specific root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>synapses</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, include synapses in the meshwork, by default True</p> </li> <li> <code>restore_graph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, restore the graph structure, by default False</p> </li> <li> <code>restore_properties</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, restore the properties of the meshwork, by default True</p> </li> <li> <code>synapse_reference_tables</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional synapse reference tables to use, by default None</p> </li> <li> <code>skeleton_version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Version of the skeleton to use, by default None</p> </li> <li> <code>transform</code>               (<code>Literal['rigid', 'streamline']</code>, default:                   <code>None</code> )           \u2013            <p>Type of transformation to apply, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Meshwork</code>           \u2013            <p>The meshwork for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.latest_valid_timestamp","title":"<code>latest_valid_timestamp(root_ids)</code>","text":"<p>Get the latest valid timestamps for a list of root IDs. If the root ID is out of date, it will return the last timestamp at which it was valid and could be used in queries. If the root ID is up to date, it will return the current timestamp at the request time, which is still ensured to be valid.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>list[int]</code>)           \u2013            <p>The list of root IDs to get the latest valid timestamps for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>NDArray</code>           \u2013            <p>The latest valid timestamps for the specified root IDs.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.neuroglancer_url","title":"<code>neuroglancer_url(target_url=None, clipboard=False, shorten=False, root_ids=None)</code>","text":"<p>Get the Neuroglancer URL for the current datastack and version.</p> <p>Parameters:</p> <ul> <li> <code>target_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for Neuroglancer, by default None (uses default server address).</p> </li> <li> <code>root_ids</code>               (<code>Optional[list[int]]</code>, default:                   <code>None</code> )           \u2013            <p>List of root IDs to include in the Neuroglancer URL, by default None (includes none).</p> </li> <li> <code>clipboard</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, copy the URL to the clipboard instead of returning it, by default False.</p> </li> <li> <code>shorten</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, shorten the URL using a URL shortener service, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Neuroglancer URL.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.now","title":"<code>now()</code>  <code>staticmethod</code>","text":"<p>Get the current time in UTC timezone.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.query_synapses","title":"<code>query_synapses(root_ids, pre=False, post=False, reference_tables=None, synapse_table=None, omit_self_synapse=True, resolution=[1, 1, 1], split_positions=True, live=False, timestamp=None, suffixes=None, batch_size=10, ref_batch_size=5000, progress=True)</code>","text":"<p>Query synapses for one or more root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>(int, list)</code>)           \u2013            <p>Root ID or list of ids for a neuron.</p> </li> <li> <code>pre</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include pre-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>post</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include post-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>reference_tables</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>List of reference tables to use, by default None. Reference tables will be merged on \"id\" column, which could result in null values.</p> </li> <li> <code>synapse_table</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Name of the synapse table to use, by default None (uses default synapse table)</p> </li> <li> <code>resolution</code>           \u2013            <p>Desired resolution for positions, by default [1, 1, 1]</p> </li> <li> <code>split_positions</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, split position columns into x, y, z, by default True.</p> </li> <li> <code>live</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use live_query to query synapses, by default False.</p> </li> <li> <code>timestamp</code>               (<code>datetime</code>, default:                   <code>None</code> )           \u2013            <p>Timestamp for the query, by default None (uses current time). The same timestamp must be used for all root IDs.</p> </li> <li> <code>omit_self_synapse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, omit self-synapses, by default True</p> </li> <li> <code>suffixes</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Suffixes to use for reference table columns, by default None.</p> </li> <li> <code>batch_size</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Batch size for number of cells to query at once, by default 10.</p> </li> <li> <code>ref_batch_size</code>               (<code>int</code>, default:                   <code>5000</code> )           \u2013            <p>Batch size for number of synapses to query in reference tables at once, by default 5000.</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, show progress bar, by default True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>DataFrame containing the synapses for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.set_export_cloudpath","title":"<code>set_export_cloudpath(cloudpath)</code>","text":"<p>Set the cloud path for static table exports.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.unfix_mat_timestamp","title":"<code>unfix_mat_timestamp()</code>","text":"<p>Unfix the timestamp from the materialization version.</p>"},{"location":"reference/api/#cortical_tools.datasets.v1dd.V1ddClient.version_timestamp","title":"<code>version_timestamp(version=None)</code>","text":"<p>Get the timestamp for a specific materialization version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to get the timestamp for, by default None (uses current version).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The timestamp of the specified materialization version.</p> </li> </ul>"},{"location":"reference/api/#core-classes","title":"Core Classes","text":""},{"location":"reference/api/#datasetclient","title":"DatasetClient","text":"<p>The base class that provides core functionality for all dataset clients.</p> <p>Methods:</p> <ul> <li> <code>fix_mat_timestamp</code>             \u2013              <p>Fix the timestamp to a specific materialization version, by default the current version.</p> </li> <li> <code>get_l2_ids</code>             \u2013              <p>Get level 2 ids for a root id.</p> </li> <li> <code>get_skeleton</code>             \u2013              <p>Get the meshwork for a specific root ID.</p> </li> <li> <code>latest_valid_timestamp</code>             \u2013              <p>Get the latest valid timestamps for a list of root IDs.</p> </li> <li> <code>neuroglancer_url</code>             \u2013              <p>Get the Neuroglancer URL for the current datastack and version.</p> </li> <li> <code>now</code>             \u2013              <p>Get the current time in UTC timezone.</p> </li> <li> <code>query_synapses</code>             \u2013              <p>Query synapses for one or more root ID.</p> </li> <li> <code>set_export_cloudpath</code>             \u2013              <p>Set the cloud path for static table exports.</p> </li> <li> <code>unfix_mat_timestamp</code>             \u2013              <p>Unfix the timestamp from the materialization version.</p> </li> <li> <code>version_timestamp</code>             \u2013              <p>Get the timestamp for a specific materialization version.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>cave</code>               (<code>CAVEclientFull</code>)           \u2013            <p>Get the CAVEclient instance for this CortexClient.</p> </li> <li> <code>dataset_transform</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform associated with this CortexClient.</p> </li> <li> <code>datastack_name</code>               (<code>str</code>)           \u2013            <p>Get the name of the datastack associated with this CortexClient.</p> </li> <li> <code>mesh</code>               (<code>MeshClient</code>)           \u2013            <p>Get the MeshClient instance for this CortexClient.</p> </li> <li> <code>server_address</code>               (<code>str</code>)           \u2013            <p>Get the server address associated with this CortexClient.</p> </li> <li> <code>space</code>               (<code>Dataset</code>)           \u2013            <p>Get the dataset transform for this CortexClient.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Get the materialization version of the CAVEclient.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.cave","title":"<code>cave</code>  <code>property</code>","text":"<p>Get the CAVEclient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.dataset_transform","title":"<code>dataset_transform</code>  <code>property</code>","text":"<p>Get the dataset transform associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.datastack_name","title":"<code>datastack_name</code>  <code>property</code>","text":"<p>Get the name of the datastack associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.mesh","title":"<code>mesh</code>  <code>property</code>","text":"<p>Get the MeshClient instance for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.server_address","title":"<code>server_address</code>  <code>property</code>","text":"<p>Get the server address associated with this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.space","title":"<code>space</code>  <code>property</code>","text":"<p>Get the dataset transform for this CortexClient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.version","title":"<code>version</code>  <code>property</code> <code>writable</code>","text":"<p>Get the materialization version of the CAVEclient.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.fix_mat_timestamp","title":"<code>fix_mat_timestamp(version=None)</code>","text":"<p>Fix the timestamp to a specific materialization version, by default the current version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to fix the timestamp to, by default None (uses current version).</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.get_l2_ids","title":"<code>get_l2_ids(root_id, bounds=None)</code>","text":"<p>Get level 2 ids for a root id.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[int]</code>           \u2013            <p>List of level 2 IDs for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.get_skeleton","title":"<code>get_skeleton(root_id, synapses=True, restore_graph=False, restore_properties=True, synapse_reference_tables=None, skeleton_version=None, transform=None)</code>","text":"<p>Get the meshwork for a specific root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>synapses</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, include synapses in the meshwork, by default True</p> </li> <li> <code>restore_graph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, restore the graph structure, by default False</p> </li> <li> <code>restore_properties</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, restore the properties of the meshwork, by default True</p> </li> <li> <code>synapse_reference_tables</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Additional synapse reference tables to use, by default None</p> </li> <li> <code>skeleton_version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Version of the skeleton to use, by default None</p> </li> <li> <code>transform</code>               (<code>Literal['rigid', 'streamline']</code>, default:                   <code>None</code> )           \u2013            <p>Type of transformation to apply, by default None</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Meshwork</code>           \u2013            <p>The meshwork for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.latest_valid_timestamp","title":"<code>latest_valid_timestamp(root_ids)</code>","text":"<p>Get the latest valid timestamps for a list of root IDs. If the root ID is out of date, it will return the last timestamp at which it was valid and could be used in queries. If the root ID is up to date, it will return the current timestamp at the request time, which is still ensured to be valid.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>list[int]</code>)           \u2013            <p>The list of root IDs to get the latest valid timestamps for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>NDArray</code>           \u2013            <p>The latest valid timestamps for the specified root IDs.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.neuroglancer_url","title":"<code>neuroglancer_url(target_url=None, clipboard=False, shorten=False, root_ids=None)</code>","text":"<p>Get the Neuroglancer URL for the current datastack and version.</p> <p>Parameters:</p> <ul> <li> <code>target_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for Neuroglancer, by default None (uses default server address).</p> </li> <li> <code>root_ids</code>               (<code>Optional[list[int]]</code>, default:                   <code>None</code> )           \u2013            <p>List of root IDs to include in the Neuroglancer URL, by default None (includes none).</p> </li> <li> <code>clipboard</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, copy the URL to the clipboard instead of returning it, by default False.</p> </li> <li> <code>shorten</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, shorten the URL using a URL shortener service, by default False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The Neuroglancer URL.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.now","title":"<code>now()</code>  <code>staticmethod</code>","text":"<p>Get the current time in UTC timezone.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.query_synapses","title":"<code>query_synapses(root_ids, pre=False, post=False, reference_tables=None, synapse_table=None, omit_self_synapse=True, resolution=[1, 1, 1], split_positions=True, live=False, timestamp=None, suffixes=None, batch_size=10, ref_batch_size=5000, progress=True)</code>","text":"<p>Query synapses for one or more root ID.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>(int, list)</code>)           \u2013            <p>Root ID or list of ids for a neuron.</p> </li> <li> <code>pre</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include pre-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>post</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, include post-synaptic synapses, by default True. All synapses will be concatenated into a single dataframe, with duplicate synapse ids removed.</p> </li> <li> <code>reference_tables</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>List of reference tables to use, by default None. Reference tables will be merged on \"id\" column, which could result in null values.</p> </li> <li> <code>synapse_table</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Name of the synapse table to use, by default None (uses default synapse table)</p> </li> <li> <code>resolution</code>           \u2013            <p>Desired resolution for positions, by default [1, 1, 1]</p> </li> <li> <code>split_positions</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, split position columns into x, y, z, by default True.</p> </li> <li> <code>live</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use live_query to query synapses, by default False.</p> </li> <li> <code>timestamp</code>               (<code>datetime</code>, default:                   <code>None</code> )           \u2013            <p>Timestamp for the query, by default None (uses current time). The same timestamp must be used for all root IDs.</p> </li> <li> <code>omit_self_synapse</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, omit self-synapses, by default True</p> </li> <li> <code>suffixes</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>Suffixes to use for reference table columns, by default None.</p> </li> <li> <code>batch_size</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>Batch size for number of cells to query at once, by default 10.</p> </li> <li> <code>ref_batch_size</code>               (<code>int</code>, default:                   <code>5000</code> )           \u2013            <p>Batch size for number of synapses to query in reference tables at once, by default 5000.</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, show progress bar, by default True.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>DataFrame containing the synapses for the specified root ID.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.set_export_cloudpath","title":"<code>set_export_cloudpath(cloudpath)</code>","text":"<p>Set the cloud path for static table exports.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.unfix_mat_timestamp","title":"<code>unfix_mat_timestamp()</code>","text":"<p>Unfix the timestamp from the materialization version.</p>"},{"location":"reference/api/#cortical_tools.common.DatasetClient.version_timestamp","title":"<code>version_timestamp(version=None)</code>","text":"<p>Get the timestamp for a specific materialization version.</p> <p>Parameters:</p> <ul> <li> <code>version</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>The materialization version to get the timestamp for, by default None (uses current version).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>datetime</code>           \u2013            <p>The timestamp of the specified materialization version.</p> </li> </ul>"},{"location":"reference/api/#meshclient","title":"MeshClient","text":"<p>Provides mesh-related operations and utilities.</p> <p>Methods:</p> <ul> <li> <code>compute_vertex_to_l2_mapping</code>             \u2013              <p>Compute an approximate mapping for each mesh vertex to the associated layer 2 id.</p> </li> <li> <code>get_mesh</code>             \u2013              <p>Get single mesh from root id</p> </li> <li> <code>get_meshes</code>             \u2013              <p>Get multiple meshes from root ids.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>mesh_l2_mappings</code>               (<code>dict</code>)           \u2013            <p>Get the dictionary of root id to mesh vertex to layer 2 id mappings.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.mesh.MeshClient.mesh_l2_mappings","title":"<code>mesh_l2_mappings</code>  <code>property</code>","text":"<p>Get the dictionary of root id to mesh vertex to layer 2 id mappings.</p>"},{"location":"reference/api/#cortical_tools.mesh.MeshClient.compute_vertex_to_l2_mapping","title":"<code>compute_vertex_to_l2_mapping(root_id, vertices=None, faces=None, lvl2_ids=None, lvl2_pts=None, max_distance=500, ratio_better=0.5, hop_limit=None, cloudvolume_fallback=False, n_jobs=-1, return_assigner=False, mesh_kwargs=None)</code>","text":"<p>Compute an approximate mapping for each mesh vertex to the associated layer 2 id. Note that this is close but somewhat heuristic due to the nature of how meshes are produced. Assignment is based first on the representative points of layer 2 ids, and then falls back to heuristic methods for floating mesh components. If a vertex cannot be assigned a layer 2 id, it will be assigned a default value of 0.</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>vertices</code>               (<code>Optional[NDArray]</code>, default:                   <code>None</code> )           \u2013            <p>Vertex positions, if you have a mesh already downloaded. Will be downloaded otherwise.</p> </li> <li> <code>faces</code>               (<code>Optional[NDArray]</code>, default:                   <code>None</code> )           \u2013            <p>Face indices, if you have a mesh already downloaded. Will be downloaded otherwise.</p> </li> <li> <code>lvl2_ids</code>               (<code>Optional[NDArray]</code>, default:                   <code>None</code> )           \u2013            <p>Layer 2 IDs, if already loaded. Will be downloaded otherwise.</p> </li> <li> <code>lvl2_pts</code>               (<code>Optional[NDArray]</code>, default:                   <code>None</code> )           \u2013            <p>Layer 2 points, if already loaded. Will be downloaded otherwise.</p> </li> <li> <code>max_distance</code>               (<code>float</code>, default:                   <code>500</code> )           \u2013            <p>Maximum distance for mesh compartment assignment based on proximity, in nanometers (or mesh units).</p> </li> <li> <code>ratio_better</code>               (<code>float</code>, default:                   <code>0.5</code> )           \u2013            <p>Ratio for how much better a proximity-based assignment must be than the second-best assignment to be used.</p> </li> <li> <code>hop_limit</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Hop limit for assignment of unassigned nodes via closest graph traversal.</p> </li> <li> <code>cloudvolume_fallback</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use CloudVolume to try to download data. Much slower.</p> </li> <li> <code>n_jobs</code>               (<code>int</code>, default:                   <code>-1</code> )           \u2013            <p>Number of jobs for parallel processing. Defaults to -1 (all available cores).</p> </li> <li> <code>return_assigner</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, returns the vertex assigner object as well. Defaults to False.</p> </li> <li> <code>mesh_kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>None</code> )           \u2013            <p>Additional keyword arguments to pass to the mesh download function.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>l2_mapping</code> (              <code>NDArray</code> )          \u2013            <p>Array of layer 2 IDs for each vertex.</p> </li> <li> <code>vertex_assigner</code> (              <code>VertexAssigner</code> )          \u2013            <p>Object containing information about the vertex assignment process, including mesh vertices and faces.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.mesh.MeshClient.get_mesh","title":"<code>get_mesh(root_id, *, progress=False, **kwargs)</code>","text":"<p>Get single mesh from root id</p> <p>Parameters:</p> <ul> <li> <code>root_id</code>               (<code>int</code>)           \u2013            <p>Root ID for a neuron</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use progress bar, by default True</p> </li> <li> <code>kwargs</code>           \u2013            <p>Additional keyword arguments to pass to cloudvolume.mesh.get.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Mesh</code>           \u2013            <p>Mesh</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.mesh.MeshClient.get_meshes","title":"<code>get_meshes(root_ids, *, progress=True, **kwargs)</code>","text":"<p>Get multiple meshes from root ids.</p> <p>Parameters:</p> <ul> <li> <code>root_ids</code>               (<code>list</code>)           \u2013            <p>List of root ids</p> </li> <li> <code>progress</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, use progress bar, by default True</p> </li> <li> <code>kwargs</code>           \u2013            <p>Additional keyword arguments to pass to cloudvolume.mesh.get.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>Dictionary of meshes keyed by root id.</p> </li> </ul>"},{"location":"reference/api/#file-export-classes","title":"File Export Classes","text":""},{"location":"reference/api/#tableexportclient","title":"TableExportClient","text":"<p>Main client for working with static table exports.</p> <p>Client for accessing CAVE table exports at a specific cloud path. Talk to your dataset admin for the cloud path and to discuss what tables are made available with this route.</p> <p>Parameters:</p> <ul> <li> <code>cloudpath</code>               (<code>str</code>)           \u2013            <p>The cloud path to the table exports.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>available_data_df</code>             \u2013              <p>Get a DataFrame of all available data.</p> </li> <li> <code>available_versions</code>             \u2013              <p>Get the available versions for a specific table.</p> </li> <li> <code>get_table</code>             \u2013              <p>Download a specific table as a DataFrame.</p> </li> <li> <code>reset_available_files</code>             \u2013              <p>Reset the available files cache.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>available_files</code>           \u2013            <p>List available files at the cloudpath.</p> </li> <li> <code>available_tables</code>           \u2013            <p>Get the available tables.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.files.TableExportClient.available_files","title":"<code>available_files</code>  <code>property</code>","text":"<p>List available files at the cloudpath.</p>"},{"location":"reference/api/#cortical_tools.files.TableExportClient.available_tables","title":"<code>available_tables</code>  <code>property</code>","text":"<p>Get the available tables.</p>"},{"location":"reference/api/#cortical_tools.files.TableExportClient.available_data_df","title":"<code>available_data_df()</code>","text":"<p>Get a DataFrame of all available data.</p>"},{"location":"reference/api/#cortical_tools.files.TableExportClient.available_versions","title":"<code>available_versions(table_name)</code>","text":"<p>Get the available versions for a specific table.</p>"},{"location":"reference/api/#cortical_tools.files.TableExportClient.get_table","title":"<code>get_table(table_name, version)</code>","text":"<p>Download a specific table as a DataFrame.</p>"},{"location":"reference/api/#cortical_tools.files.TableExportClient.reset_available_files","title":"<code>reset_available_files()</code>","text":"<p>Reset the available files cache.</p>"},{"location":"reference/api/#cloudfileviewexport","title":"CloudFileViewExport","text":"<p>Individual export file representation.</p> <p>Methods:</p> <ul> <li> <code>get_dataframe</code>             \u2013              <p>Get the DataFrame for a specific version.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>datapath</code>               (<code>str</code>)           \u2013            <p>Get the full file path.</p> </li> <li> <code>headerpath</code>               (<code>str</code>)           \u2013            <p>Get the header file path.</p> </li> </ul>"},{"location":"reference/api/#cortical_tools.files.CloudFileViewExport.datapath","title":"<code>datapath</code>  <code>property</code>","text":"<p>Get the full file path.</p>"},{"location":"reference/api/#cortical_tools.files.CloudFileViewExport.headerpath","title":"<code>headerpath</code>  <code>property</code>","text":"<p>Get the header file path.</p>"},{"location":"reference/api/#cortical_tools.files.CloudFileViewExport.get_dataframe","title":"<code>get_dataframe(version, verbose=True)</code>","text":"<p>Get the DataFrame for a specific version.</p>"}]}